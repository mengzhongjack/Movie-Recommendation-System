#BlueJ class context
comment0.target=MovieRunnerSimilarRatings
comment1.params=
comment1.target=void\ printSimilarRatings()
comment1.text=\r\n\ \ \ \ public\ void\ printAverageRatings()\ {\r\n\ \ \ \ \ \ \ \ MovieDatabase.initialize("ratedmovies_short.csv");\r\n\ \ \ \ \ \ \ \ String\ ratingfile\ \=\ "ratings_short.csv";\r\n\ \ \ \ \ \ \ \ FourthRatings\ fr\ \=\ new\ FourthRatings(ratingfile);\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ int\ numOfRater\ \=\ fr.getRaterSize();\r\n\ \ \ \ \ \ \ \ int\ numOfMovie\ \=\ MovieDatabase.size();\r\n\ \ \ \ \ \ \ \ System.out.println("read\ data\ for\ "\ +\ numOfRater\ +\ "\ raters");\r\n\ \ \ \ \ \ \ \ System.out.println("read\ data\ for\ "\ +\ numOfMovie\ +\ "\ movies");\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ int\ minimalRaters\ \=\ 1;\r\n\ \ \ \ \ \ \ \ ArrayList<Rating>\ movies\ \=\ fr.getAverageRatings(minimalRaters);\r\n\ \ \ \ \ \ \ \ System.out.println("found\ "\ +\ movies.size()\ +\ "\ movies");\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ Collections.sort(movies);\r\n\ \ \ \ \ \ \ \ for(Rating\ rating\ \:\ movies)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ System.out.println(rating.getValue()\ +\ "\\t"\ +\ MovieDatabase.getTitle(rating.getItem()));\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ public\ void\ printAverageRatingsByYearAfterAndGenre()\ {\r\n\ \ \ \ \ \ \ \ MovieDatabase.initialize("ratedmovies_short.csv");\r\n\ \ \ \ \ \ \ \ String\ ratingfile\ \=\ "ratings_short.csv";\r\n\ \ \ \ \ \ \ \ FourthRatings\ fr\ \=\ new\ FourthRatings(ratingfile);\r\n\ \ \ \ \ \ \ \ AllFilters\ allFilters\ \=\ new\ AllFilters();\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ int\ numOfRater\ \=\ fr.getRaterSize();\r\n\ \ \ \ \ \ \ \ int\ numOfMovie\ \=\ MovieDatabase.size();\r\n\ \ \ \ \ \ \ \ System.out.println("read\ data\ for\ "\ +\ numOfRater\ +\ "\ raters");\r\n\ \ \ \ \ \ \ \ System.out.println("read\ data\ for\ "\ +\ numOfMovie\ +\ "\ movies");\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ int\ year\ \=\ 1980;\r\n\ \ \ \ \ \ \ \ String\ genre\ \=\ "Romance";\r\n\ \ \ \ \ \ \ \ int\ minimalRaters\ \=\ 1;\r\n\ \ \ \ \ \ \ \ Filter\ filter1\ \=\ new\ YearAfterFilter(year);\r\n\ \ \ \ \ \ \ \ Filter\ filter2\ \=\ new\ GenreFilter(genre);\r\n\ \ \ \ \ \ \ \ allFilters.addFilter(filter1);\r\n\ \ \ \ \ \ \ \ allFilters.addFilter(filter2);\r\n\ \ \ \ \ \ \ \ ArrayList<Rating>\ movies\ \=\ fr.getAverageRatingsByFilter(minimalRaters,\ allFilters);\r\n\ \ \ \ \ \ \ \ System.out.println(movies.size()\ +\ "\ movie(s)\ matched");\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ Collections.sort(movies);\r\n\ \ \ \ \ \ \ \ for(Rating\ rating\ \:\ movies)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ System.out.println(rating.getValue()\ +\ "\ "\ +\ MovieDatabase.getYear(rating.getItem())\ +\ "\ "\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ +\ MovieDatabase.getTitle(rating.getItem()));\r\n\ \ \ \ \ \ \ \ \ \ \ \ System.out.println("\\t"\ +\ MovieDatabase.getGenres(rating.getItem()));\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n
comment2.params=
comment2.target=void\ printSimilarRatingsByGenre()
comment3.params=
comment3.target=void\ printSimilarRatingsByDirector()
comment4.params=
comment4.target=void\ printSimilarRatingsByGenreAndMinutes()
comment5.params=
comment5.target=void\ printSimilarRatingsByYearAfterAndMinutes()
numComments=6
